上下左右の入力
空のウィンドウのみが表示


10.30
構造体にしようとした途中
common.hはこれでええとは思うけど
func.c は途中、宣言のところで初期化せんとあかん

・描画するもの
床（背景）
棚(何個か、ステージによる）
金塊(1つ？)
敵(何人か、ステージによる)
カメラ（何個か、ステージによる）
プレイヤー（3人)
出入り口？

敵の視界（敵と同じ数）
カメラの視界（カメラと同じ数)

なんとか構造体使って表示はできたけど、冗長に見えるところがあったので改善する
キャラの移動をmainに書いて、dstで位置移動させる
マリオみたいな、位置と画像の位置それぞれで変数作らずに位置(rect)で全部やったほうがわかりやすい気がするけどどうなんやろ

今日やること
pdfの関数、ネットワーク系のやつ追加
構造体でキャラ動かせるように -> できた
スティックで動かせるようにデータもらう　まだ
構造体でカメラ動かせるように　

今日できた悩みごと
マップたくさん追加するなら、ファイルからいじって追加できるようにすべきなんかな？
でもそれだとデバッグの元とおんなじ感じの見た目になりそうなのが・・・


git ブランチのメモ
今からキャラ移動の関数作ろうとしよるけど、新しくブランチ作るべき？

ステージとか、金塊とったか？とかって新しくゲームを管理する構造体作ったほうがええんちゃうんかな？
あとあとステージたくさん読み込む必要あるから・・・
まあでも今はゲーム動かすことが先やから後からで


11.7
とりあえず目的までの移動
敵キャラ、動かずに見渡してるだけのパターンもある
2点間を無限に移動する敵をとりあえず作る
	そのためにはマップの作成が必要、敵の動きかえる床を作る

マップ作成はマリオ参考に、mapdataを読み込んでやる
3マップ程度なら2次元配列とかでマップ作ってもええかな
というか別に金塊は100*100で別にマップにいれんと個別に入れてもええ

マップ作る意味は敵の動き制御と、棚の配置のため

ImageLoad関数をMakeMap関数に置き換えることを考える

キャラの脱出も実装する必要がある
ゲームクリア判定とかスタート画面とかの状態遷移とかも必要よな

敵キャラの移動、棚との衝突判定を実装した


カメラの傾き具合を構造体で持たせる
	→斜めカメラも実装できる

今日進んだこと
カメラの実装
プレイヤーのスムーズ移動
ネットワークの実装（別PCで動いた）
棚の当たり判定
マップの試作

11.8
固定オブジェクトはグローバル変数
マップ読み込んで、固定オブジェクト配列の数を決めるのが無理
mallocとかやる？

金塊とったときに間違えたものだったら爆発

マップから読み込んで棚の配置をできるようにした
ネットワークを使っての移動がスムーズになった
敵の移動を画面内になるように改良した

11.11
棚の数を最初に指定しておきながらマップデータを合わせるのはクソめんどいから、棚の数の最大を指定しておいて先に配列作ってメモリ確保しておいてからマップデータ読み込む方が多分後々マップ作りやすいはず
とりあえず先金塊とかの表示しようかな
	ー＞敵が先にしよう

// オブジェクトの数などはテキストファイルで読み込めるようにしたほうがいろんなマップに対応できるから後から修正したい
する(あとからテキストファイルにしたりしてステージごとに作ったりできる？)

いつかはmaptypeとobjecttypeを一緒にする
maptypeはただ0　＝　Noneを入れたかっただけなのでちょちょっとｔｙぺが出てるところ修正したらおｋ

typedef enum{
	MT_NONE = 0,
	MT_KINKAI = 1,
	MT_SHELF = 2,
	MT_CAMERA = 3,
	MT_ENTRANCE = 4,
	MT_ENEMY = 5
}maptype;

やったこと
プレイヤーが棚を貫通するのを修正

11.12
commitに書いてるとおり、maptypeとtypeを一緒にした

11.13
今日は敵の動きをやるぞ
とりあえず方向を変えて巡回するやつ作ろう

敵の移動床作ってたらmakemap関数治すことになって、それを直してたらプレイヤーとか棚とかが描画できんくなった
うおおおおわからんけど帰る！

11.14
グループ活動報告書にやったこと書いてもらう
コミットメッセージからもいける？

11.18
ネットワークで金塊とれるようにした
スタート画面の実装
ヘッダファイルなどの整理
アドレスが一緒になってしまうバグの修正（俺のミスのやつ）

敵の移動の実装　-> できた、壁と画面外で反転と、移動床にしたがって移動
矢印の画像はあとあと消す必要あり

敵の邪魔アイデア
ハッキングするのに時間がかかる、3秒くらい？
ハッキングすると視界が固定される

プレイヤーの向きを送信する（催涙スプレーとかのときに必要になる）、Rendercopyexでやったほうがかんたんそうやけどどうやろ？
最後に入力したキーの方向に向けばいいから、ネットワークはおけ

斜め移動について
https://bituse.info/game/19
裏で実数で計算しといて、表で描画するときにintでキャストするようにしたらいけそうな感じする？

矢野と山口の統合
プレイヤーが斜め方向に移動する際、上下左右方向の移動に比べ、速度が早くなるため、その不具合を改善するための方法を検討した

        if (SDL_IntersectRect(&kotei_objects[j].dst_rect, &shelf_overrap_rect, &overrap_rect) &&                                            // 敵が固定オブジェクトに重なる、かつ
          kotei_objects[j].type == TYPE_SHELF &&                                                                                         // 固定オブジェクトが棚だったとき、かつ
          overrap_rect.w >= enemy[i].dst_rect.w && overrap_rect.h >= enemy[i].dst_rect.h &&                                              // 敵と、棚が完全に重なって、かつ
          abs((enemy[i].dst_rect.x + enemy[i].dst_rect.w / 2) - (kotei_objects[j].dst_rect.x + kotei_objects[j].dst_rect.w / 2)) <= 2 && // 敵のx座標が棚の真ん中に近くなって、かつ
          abs((enemy[i].dst_rect.y + enemy[i].dst_rect.h / 2) - (kotei_objects[j].dst_rect.y + kotei_objects[j].dst_rect.h / 2)) <= 2) { // 敵のy座標が棚の真ん中に近くなったとき
          if ((enemy[i].prev_overlap_rect.w == 0 && enemy[i].prev_overlap_rect.w == 0) || abs(enemy[i].prev_overlap_rect.x - enemy[i].dst_rect.x) >= MAP_CHIPSIZE || abs(enemy[i].prev_overlap_rect.y - enemy[i].dst_rect.y) >= MAP_CHIPSIZE) {                                                                                    // 前回移動床に乗った時の座標から、MAP_CHIPSIZE分離れているか、または移動床に乗ったのが最初のとき
            ChangeEnemyMoveAngle(&enemy[i], kotei_objects[j].dst_rect, kotei_objects[j].type); // 床のタイプによって、敵の動く方向をかえる
            enemy[i].prev_overlap_rect = overrap_rect;                                         // 前回移動床に乗った時の座標を保存しておく（同じ床で判定して無限ループにならないように）
          }
        }

11.25
カメラの視界と、カメラ本体の回転の同期
プレイヤー斜め移動の速度の改善

11.27
NPCの視界
ステージ決め　ー＞　おっけー

一定時間で、縦横の設定した確率に従って移動する敵の「ランダム移動」
移動の条件つけ、縦2回は移動しないみたいな
ランダムだといきなり真反対向かれるのは厳しいので、真反対は向かないみたいなのあったらゲームの面白さ的には良さそう

敵がプレイヤーをとおせんぼするやつ、

サブ
./agentと./serverやるのめんどいから1コマンドでできるやつ作る

 && (enemy[i].dst_rect.y + enemy[i].dst_rect.h / 2) % (MAP_CHIPSIZE - enemy[i].dst_rect.h / 2) <= 2

ランダム移動実装した。

11.29
      // case MT_RIGHT_METHOD:
      //   shelf_overrap_rect = enemy[i].dst_rect; // 右に壁があるかどうか見る当たり判定の矩形
      //   switch (enemy[i].move_angle) // 右の壁の判定になるように、当たり判定をMAP_CHIPSIZE分移動させる
      //   {
      //   case 0:
      //     shelf_overrap_rect.x += MAP_CHIPSIZE;
      //     break;
      //   case 90:
      //     shelf_overrap_rect.y += MAP_CHIPSIZE;
      //     break;
      //   case 180:
      //     shelf_overrap_rect.x -= MAP_CHIPSIZE;
      //     break;
      //   case 270:
      //     shelf_overrap_rect.y -= MAP_CHIPSIZE;
      //     break;
      //   }
      // // マップデータをfor文で1マスずつ読み込んでいく
      // for (k = 0; k < MAP_HEIGHT; k++, map_y += MAP_CHIPSIZE) {
      //   map_x = 0;
      //   for (l = 0; l < MAP_WIDTH; l++, map_x += MAP_CHIPSIZE){
      //     if(abs((enemy[i].dst_rect.x + enemy[i].dst_rect.w / 2) - (map_x + MAP_CHIPSIZE / 2)) <= 2 && abs((enemy[i].dst_rect.y + enemy[i].dst_rect.h / 2) - (map_y + MAP_CHIPSIZE)) <= 2) { // 敵のx,y座標がmap_chipsizeの真ん中に近くなったとき
      //       printf("真ん中\n"); // ここでマップのchipsizeの真ん中で判定されるようにしてほしい！！
      //     }
      //   }
      // }
      //break;
プレイヤーの追跡をする敵の動きを実装した。

12.2
プレイヤーの位置から、敵の動きのタイプを変える
壁にぶつかったらランダムに動くとか？
カメラ用のマップを作って、値を最初に向いてる角度とかにする？
マリオみたいに位置

12.6
敵に催涙スプレー
プレイヤーの向く方向

敵の方に向いて、３（範囲攻撃？）
催涙スプレーの演出中は、移動ストップ
敵の視界がなくなる。

プレイヤーの方向を取ろうとしたけどうまくいかなかった
斜め方向入れた後、戻すと上下左右の方向どれかになる
上下左右入れた後はそんなんならんのが謎
わけわかめ

12.9
カメラの使用回数制限もあった方がいいよね
カメラのハッキング動作
催涙スプレーの描画
全員がスタートボタン押したらスタートするようになった。

12.16
    // tri[xかyか][元の点、左の点、右の点]
    for(int j=0; j<kotei_object_num; j++){
      if (kotei_objects[j].type != TYPE_SHELF) // 棚以外とぶつかったときは無視
        break;
      // 敵の視界が固定オブジェクトに当たった時
      // 敵の視界の左側、右側が当たってて、前側が当たってない時（＝壁を貫通して当たり判定があるとき）
      if ((SDL_IntersectRectAndLine(&kotei_objects[j].dst_rect, &enemy[i].tri[0][0], &enemy[i].tri[1][0], &enemy[i].tri[0][1], &enemy[i].tri[1][1]) || SDL_IntersectRectAndLine(&kotei_objects[j].dst_rect, &enemy[i].tri[0][0], &enemy[i].tri[1][0], &enemy[i].tri[0][2], &enemy[i].tri[1][2])) && (SDL_IntersectRectAndLine(&kotei_objects[j].dst_rect, &enemy[i].tri[0][1], &enemy[i].tri[1][1], &enemy[i].tri[0][2], &enemy[i].tri[1][2]) == SDL_FALSE)){
            SDL_Rect col = kotei_objects[j].dst_rect;
            switch(enemy[i].move_angle){
              case 0:
                if(col.y + col.h > enemy[i].tri[1][1]){
                  enemy[i].tri[1][1] = col.y + col.h;
                  enemy[i].tri[1][2] = col.y + col.h;
                }
                break;
              case 90:
                if(col.x < enemy[i].tri[0][1]){
                  enemy[i].tri[0][1] = col.x;
                  enemy[i].tri[0][2] = col.x;
                }
                break;
              case 180:
                if(col.y < enemy[i].tri[1][1]){
                  enemy[i].tri[1][1] = col.y;
                  enemy[i].tri[1][2] = col.y;
                }
                break;
              case 270:
                if(col.x + col.w > enemy[i].tri[0][1]){
                  enemy[i].tri[0][1] = col.x;
                  enemy[i].tri[0][2] = col.x;
                }
                break;
            }
      }
    }
敵の視界が壁を貫通しないようにつくってたけど、よくわからんくなったので途中でやめたプログラム

敵の視界、最短で回ってくれない
他のプレイヤーが消えると自分もきえる？よくわからん（379行目）
催涙スプレーもめっちゃラグるときあるしまじでわからん

12.20
敵の視界の回転と、催涙スプレー当たった時の敵が止まる、視界が消える処理ができた
催涙スプレー無限だと強すぎるから、時間制限つけた、ゲージとかは未実装

敵の追尾、一番近いプレイヤーに対してのみ追跡を行う


12.23
催涙スプレーのゲージ、各プレイヤーのウィンドウに表示
というか現在のプレイヤーの情報表示するウィンドウあったほうがいいよね（プレイヤー死亡とか、金塊とってるよ！とか、ハッキング回数とか）
敵の視点を最短で戻れるように治す（現状、時計回りにしかならない）
織田の環境で、棚の一つの中で24*24分の当たり判定がなくなる
koteiobjectから別の固定objectに行くと当たり判定がない（出入り口->棚みたいなところ）
治す必要あり、もしくはそういうマップを作らない

